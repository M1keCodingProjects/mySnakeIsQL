How the grammar syntax works:
RuleName : Rule
FinalRule :: combination of RegExp, Literals or DirectTokens
? = 0 or 1 times
() = group
| = either option
+ = 1 or more
* = 0 or more
--------------------------------
Query : Select From Where? ";"?
    Select : "SELECT" AttrList
        AttrList : Attr ("," Attr)*
            Attr :: "*" | IDENT

    From : "FROM" Table (("," Table) | Join)*
        Table :: IDENT
        Join : ("OUTER"? ("LEFT" | "FULL" | "RIGHT") | "INNER"? "NATURAL")? "JOIN" Table "ON" Predicate

    Where : "WHERE" Predicate
        Predicate : ComparisonExpr (LogicalOp ComparisonExpr)* | "(" Predicate ")"
            ComparisonExpr : MathExpr CompareOp MathExpr | BetweenExpr
                MathExpr : MathExprP1 (MathOpP0 MathExprP1)*
                    MathExprP1 : MathExprP2 (MathOpP1 MathExprP2)*
                        MathExprP2 : Operand (MathOpP2 Operand)*
                            MathOpP2 :: "*" | "/"
                            Operand : Literal | Attr | "(" MathExpr ")"
                                Literal :: INT_LITERAL | STR_LITERAL | DATE_LITERAL
                    
                        MathOpP1 :: "%"
                    
                    MathOpP0 :: "+" | "-"
                
                CompareOp :: "==" | "!=" | "<>" | "<" | ">" | ">=" | "<="
                BetweenExpr : "BETWEEN" MathExpr "AND" MathExpr
            
            LogicalOp :: "AND" | "OR"